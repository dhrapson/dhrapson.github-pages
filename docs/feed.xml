<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-02-25T15:56:53+00:00</updated><id>http://localhost:4000/</id><title type="html">DHR @ cloud</title><subtitle>DevOps / PaaS Consultant in London, UK</subtitle><entry><title type="html">PaaS Continuous Delivery</title><link href="http://localhost:4000/2016/11/paas-continuous-delivery/" rel="alternate" type="text/html" title="PaaS Continuous Delivery" /><published>2016-11-11T09:02:24+00:00</published><updated>2016-11-11T09:02:24+00:00</updated><id>http://localhost:4000/2016/11/paas-continuous-delivery</id><content type="html" xml:base="http://localhost:4000/2016/11/paas-continuous-delivery/">&lt;h3&gt;&lt;a href=&quot;/2016/11/paas-continuous-delivery/&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-46&quot; src=&quot;/assets/CD-300x241.png&quot; alt=&quot;CD&quot; width=&quot;300&quot; height=&quot;241&quot; /&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Continuously deliver your PaaS using DevOps app delivery techniques&lt;/li&gt;
&lt;li&gt;Build a cross-functional product team of engineers&lt;/li&gt;
&lt;li&gt;Continuously Improve engineering and operations using agile dev team practices&lt;/li&gt;
&lt;li&gt;Measure agility using your cycle time on CVE patches&lt;/li&gt;
&lt;li&gt;Use community-standard tools, languages and processes, for best effect&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Is PaaS like standard infrastructure?&lt;/h3&gt;
&lt;p&gt;Most enterprises assign an operations team within their IT department for deploying &amp;amp; managing their PaaS infrastructure. This is not a mistake; your chosen PaaS will run on top of virtualized or cloud infrastructure, use Linux container technologies and networking, the skills for which are already held by folks working in IT.&lt;/p&gt;
&lt;p&gt;This team will immediately recognise facets of previous infrastructure deployment technologies. Taking Pivotal’s Cloud Foundry (PCF) platform as an example, the signs are: an installer; a management interface that standard users cannot access; operating system access that standard users do not have; admin-level visibility across all PaaS apps; platform logging not available to app teams; platform monitoring endpoints not accessible by app teams.&lt;/p&gt;
&lt;p&gt;In the face of all this familiar operator access, the temptation is to operate the platform manually as generally happened with, for example, virtual machine (VM) estates.&lt;/p&gt;

&lt;h3&gt;Surprise! It’s an app!&lt;/h3&gt;
&lt;p&gt;Despite this good fit &amp;amp; familiar look, a PaaS platform itself is actually a distributed app for running other apps on. Open platforms like Cloud Foundry provide great APIs and CLIs for managing the platform &amp;amp; these should be used in preference to the manual operator-style GUIs wherever possible.&lt;/p&gt;
&lt;p&gt;Choosing command-line over GUI for configuration enables management via scripted automation and a DevOps approach to delivery. Your platform team should become fanatical about automation: manual operational processes eat away at engineering time &amp;amp; left unchecked they leave no time for expanding and improving the platform. Expect to automate not only deployment of the platform itself, but also the surrounding infrastructure e.g. adding DNS entries &amp;amp; load-balancer rules.&lt;/p&gt;
&lt;p&gt;Continuously deliver your PaaS platform, just like any other app, using all the normal DevOps techniques: Infrastructure as Code (IaC) stored in source control, Continuous Integration, configuration via automation, automatic monitoring &amp;amp; management, etc. The process for changing your PaaS installation should always be kicked off by a code check-in.&lt;/p&gt;
&lt;p&gt;My experience with Cloud Foundry has been that platform teams must also build APIs to extend the platform, which can in turn be delivered as apps on top of the platform itself using CD.&lt;/p&gt;
&lt;h3&gt;Measure Cycle Time&lt;/h3&gt;
&lt;p&gt;Your PaaS platform will be judged by the user community on its functional and non-functional behaviour. A key non-functional requirement will likely be to address security vulnerabilities quickly, as their affect can be magnified by existing on a shared platform. App teams use the term ‘cycle time’ to describe the time it takes to put a single line code change into production, and agile teams continually attempt to make shorten cycle time to increase predictability of delivery. It is seen as a fair assessment of agile capability.&lt;/p&gt;
&lt;p&gt;CVE patches are the infrastructure equivalent to single line bug fixes – they can be your cycle time deliverable &amp;amp; the speed at which they can be rolled through the environments indicates the agile capability of the team. An additional benefit of having short cycle time will be that the time to add new platform features will also dramatically shorten.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Match Your Community&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Develop using the same tools &amp;amp; techniques as the rest of the community. The main benefit is the sharing of open-source code.&lt;/p&gt;
&lt;p&gt;For Cloud Foundry use a combination of Go Lang, Ruby, Bash &amp;amp; Concourse CI, developing on Macs. Your platform team engineers’ life will be harder &amp;amp; they will be less effective if your Enterprise dictates they work on Windows, writing in other languages.&lt;/p&gt;
&lt;p&gt;For development practices the Cloud Foundry community has adopted a combination of Lean, Kanban &amp;amp; XP development practices that originated in Pivotal Labs, as a de facto standard. The combination of Test Driven Design (TDD) &amp;amp; pairing are deadly for knowledge silos within the team – engineering decisions are embodied into code as custom automation that is tested, documented (via the tests themselves) and shared every step of the way. The team develops a common sense of 'how we do things' that transcends any one individual team member. This is really important for cross-functional teams where initially just one or two team members hold all the know-how for each technology.&lt;/p&gt;
&lt;p&gt;Agile teams run a retro at the end of each week, an open and frank discussion about the team &amp;amp; its work, which enables Continuous Improvement of team processes. Successful PaaS teams are copying this same style and continuously improving their activities in the same way.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Control Change&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Enterprises IT loves Change Control and has long believed that adding manual rigour to the change process improves likelihood of deployment success. This sits as odds with the concept of a continuously delivered shared platform that is continually evolving.&lt;/p&gt;
&lt;p&gt;Work with your change control team to define policy before platform go-live: define the types of change that will/won't have change requests; minimise the types of the change requiring approval e.g. only those potentially causing catastrophic outage; include the ability to refine the list as the platform beds in.&lt;/p&gt;
&lt;p&gt;Where no ITIL ‘change control’ exists this does not mean change is uncontrolled. Notify the community of changes as they run through the platform CD so that they are aware. Getting the communications mechanism right for your enterprise is crucial: slack channels, automatically updating Distribution Lists, whatever suits your platform customers.&lt;/p&gt;
&lt;h3&gt;PaaS Product Team&lt;/h3&gt;
&lt;p&gt;Treat PaaS as a product, rather than a project. This means assigning a permanent Product Manager, backed by a team of versatile engineers developing your platform &amp;amp; automation.&lt;/p&gt;
&lt;p&gt;Select engineers from a variety of backgrounds: business app developers, infrastructure developers, IT operations, network engineers, Linux sys admins, hypervisor/IaaS experts, and storage engineers are all useful folks to have on the team.&lt;/p&gt;
&lt;p&gt;New hires bring the benefit of questioning why things are done a certain way &amp;amp; PaaS-experienced team members bring the community culture &amp;amp; practices, so be sure to include at least one of each.&lt;/p&gt;
&lt;p&gt;The key element is to ensure the whole team is open to new ideas, practices &amp;amp; everyone develops code. Team members won't fit in when they try to apply too many of the lessons learned pre-PaaS, or prefer manual operations to engineering automation.&lt;/p&gt;
&lt;h3&gt;PaaS Operations&lt;/h3&gt;
&lt;p&gt;Ideally the pure operations work, by which I mean supporting platform customers &amp;amp; responding to alerts, becomes a role that moves between team members. If your Enterprise mandates that Operations is a separate team, rotate team members between Engineering and Operations, adjusting their access accordingly. All platform team members must see the effect of platform automation from both a development and operational view.&lt;/p&gt;
&lt;p&gt;The best operations teams exhibit continual improvement so create processes for analysing the root cause of failures &amp;amp; use platform engineering rather than process rigour to prevent reoccurrence. For out-of-hours support: formalise the pager handover process to include a review of incidents &amp;amp; steps that have been taken to prevent reoccurrence. This allows operational processes to continuously improve in the same way operational processes do.&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;The best way to deploy your PaaS is via Continuous Delivery, engineered and operated via a team using Continuous Improvement of team processes.&lt;/p&gt;</content><author><name></name></author><category term="cloud" /><category term="paas" /><category term="cloud foundry" /><category term="continuous delivery" /><summary type="html">TL;DR Continuously deliver your PaaS using DevOps app delivery techniques Build a cross-functional product team of engineers Continuously Improve engineering and operations using agile dev team practices Measure agility using your cycle time on CVE patches Use community-standard tools, languages and processes, for best effect Is PaaS like standard infrastructure? Most enterprises assign an operations team within their IT department for deploying &amp;amp; managing their PaaS infrastructure. This is not a mistake; your chosen PaaS will run on top of virtualized or cloud infrastructure, use Linux container technologies and networking, the skills for which are already held by folks working in IT. This team will immediately recognise facets of previous infrastructure deployment technologies. Taking Pivotal’s Cloud Foundry (PCF) platform as an example, the signs are: an installer; a management interface that standard users cannot access; operating system access that standard users do not have; admin-level visibility across all PaaS apps; platform logging not available to app teams; platform monitoring endpoints not accessible by app teams. In the face of all this familiar operator access, the temptation is to operate the platform manually as generally happened with, for example, virtual machine (VM) estates.</summary></entry><entry><title type="html">The Cloud Foundry Buildpack Cycle</title><link href="http://localhost:4000/2016/10/the-cloud-foundry-buildpack-cycle/" rel="alternate" type="text/html" title="The Cloud Foundry Buildpack Cycle" /><published>2016-10-05T21:48:20+01:00</published><updated>2016-10-05T21:48:20+01:00</updated><id>http://localhost:4000/2016/10/the-cloud-foundry-buildpack-cycle</id><content type="html" xml:base="http://localhost:4000/2016/10/the-cloud-foundry-buildpack-cycle/">&lt;h1&gt;&lt;a href=&quot;/2016/10/the-cloud-foundry-buildpack-cycle/&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-34&quot; src=&quot;/assets/cycle-300x218.jpg&quot; alt=&quot;cycle&quot; width=&quot;300&quot; height=&quot;218&quot; /&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deploy / Remove buildpacks using CI and IaC. Aim for complete automation&lt;/li&gt;
&lt;li&gt;Continually update the ‘standard’ buildpacks that come with your CF installation &amp;amp; roll the apps that run on them&lt;/li&gt;
&lt;li&gt;For custom buildpacks: setup 2 automated cycles for Create and Warn/Remove&lt;/li&gt;
&lt;li&gt;Define a buildpacks service statement that makes the buildpack cycle clear&lt;/li&gt;
&lt;li&gt;Avoid app-specific buildpacks wherever possible&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CF Buildpacks vs. traditional infrastructure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With traditional infrastructure, where server installations are centrally managed, IT Security folks have often put pressure on IT departments to roll out server fixes e.g. new WebSphere fixpacks. This is tricky because IT departments do not have the resources to re-test all the apps against the upgraded binaries.&lt;/p&gt;

&lt;p&gt;With Cloud Foundry Buildpacks the scenario becomes simplified:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Buildpacks are managed by the CF platform teams, each of which lays down specific language runtime binary versions (e.g. Java, Tomcat)&lt;/li&gt;
&lt;li&gt;Application teams can choose from the available buildpacks in CF&lt;/li&gt;
&lt;li&gt;An extension to the platform reports which applications use which buildpack&lt;/li&gt;
&lt;li&gt;IT Security can chase the application teams direct&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Standard buildpacks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some Cloud Foundry implementations such as Pivotal Cloud Foundry (PCF) come with a whole bunch installed covering all the major language runtimes (Java, PHP, Python, Go, Ruby, Node, etc).&lt;/p&gt;
&lt;p&gt;You could choose to remove the unused ones to reduce potential security attack vectors, however you will probably have to keep at least Java, Ruby, and Go as these are typically required by CF platform management apps.&lt;/p&gt;
&lt;p&gt;A better approach is to leave them in place, keep them updated and report on usage.&lt;/p&gt;
&lt;p&gt;A diligent platform operator will want to keep the remaining standard buildpacks up to date, as each buildpack constitutes a potential attack vector. A reusable process for doing this is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Detect upstream buildpack releases from your CF provider&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your CI server can do this for you. If you’re using PCF check network.pivotal.io (pivnet), which is real easy if your CI server is Concourse &amp;amp; you can access the &lt;a href=&quot;https://github.com/pivotal-cf/pivnet-resource&quot;&gt;pivnet-resource&lt;/a&gt;.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Download and update buildpacks&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Download the pre-built buildpacks and publish locally to your network. Binary repositories such as Artifactory or Nexus are ideal for this&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Test the buildpack&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Create a new buildpack in a CF environment without any business apps in it (e.g. a lab environment) &amp;amp; push a sample app against it, to prove the pre-built zip file works.&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Update buildpacks&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Update the buildpack in your CF installations without changing the buildpack names, via CI.&lt;/p&gt;
&lt;p&gt;5. Repush all the apps that depend on this buildpack&lt;/p&gt;
&lt;p&gt;After repushing, run a suite of smoke tests to prove that the platform still functions as you would expect. This will ensure that your core platform features are securely deployed. Any business apps that deployed on it should also be included in this 'rolling' of apps onto the upgraded buildpack, as should any native CF Services that are implemented as application instances.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buildpack Deployment&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Deployment of buildpacks requires Administrator-type access in CF.&lt;/p&gt;
&lt;p&gt;The best way to manage it is using a CI job that compares the buildpacks installed against a master list stored in a file or collection of files: adding those that are missing, removing those that are not listed &amp;amp; notifying the community of the changes. This kind of job is idempotent, based on Infrastructure-as-Code (IaC) so it can be re-run on a regular schedule to continuously assure your CF environment buildpacks are up to date. The files should be kept under version management.&lt;/p&gt;
&lt;p&gt;As individual buildpack CI jobs complete, they should update their entry in this buildpack definition file. Each entry should state the buildpack name and zip file location.&lt;/p&gt;
&lt;p&gt;I advocate updating the file(s) with statuses and deletion dates as older buildpack versions are superseded by new ones, rather than removing them altogether. That way you have a history of what buildpacks were intended for addition and deletion from your CF environments.&lt;/p&gt;
&lt;p&gt;By updating the buildpack IaC definition separately from deploying it into environments, you decouple the testing of new buildpacks from their general purpose rollout, which can be handy if CF environments are under change control.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Custom Buildpack Creation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You are going to be adding custom buildpacks to your CF installation, for the reasons of: adding enterprise SSL CA certificates, adding custom features, disabling unwanted functionality, custom language binary version requirements, etc. Remember to use TDD for each of the new features you add e.g. adding rspec tests for the Java Buildpack.&lt;/p&gt;
&lt;p&gt;Since these are the ones likely to be used by your enterprise applications, I recommend introducing a deployment / deletion cycle for these whereby new buildpack releases are deployed with a new name, and old ones deleted by name.&lt;/p&gt;
&lt;p&gt;The key driver behind this cycle will be to upgrade the binary versions that buildpacks install e.g. fixing security vulnerabilities. This is typically driven by a IT Security team who want to push on application security.&lt;/p&gt;
&lt;p&gt;Code merging will most likely be manual, so the deployment cycle should take two parts.&lt;/p&gt;
&lt;p&gt;CI Part 1:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Detect upstream buildpack releases from Github&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a CI process that checks the relevant github.com repository&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Merge code down into yours &amp;amp; build&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will have forked the public Github repository before adding your changes to it. Use standard Git techniques to merge the public changes to your own Git repository.&lt;/p&gt;
&lt;p&gt;If the merge fails on conflicts, fail this build.&lt;/p&gt;
&lt;p&gt;Any red on the CI board caused by a failed merge will notify the CF team that there is action required. After manually code merging &amp;amp; committing back to your custom git repository, CI Part 2 will kick off:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Detect code changes in your buildpack source code&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Build the buildpack&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Build processes are specific to each. Remember to run the buildpack unit tests. Each buildpack has a way of declaring their version internally. Ensure your build updates the internal version definition (e.g. config/version.yml for Java)&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Test the buildpack&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Create a new buildpack in CF at the lowest priority &amp;amp; push a sample app against it to test the custom features you have added (e.g. SSL certs) work. Remove the app and buildpack at the end of this.&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Install buildpacks&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Create a new entry in your buildpacks definition file. The separate Deployment CI process will kick off and deploy the buildpack.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Custom Buildpack Warning / Deletion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The process for warning / deletion on buildpacks will depend on your prior agreement with app teams. Removing buildpacks on which running apps have been built will cause issues if they restage the app &amp;amp; the buildpack is missing. However, waiting for all app teams to be off old buildpack versions before deleting them can cause a long tail of old buildpacks used by one or two stubborn app teams too busy to upgrade their apps.&lt;/p&gt;
&lt;p&gt;I recommend a halfway house: warn users of deletion in advance; delete automatically, taking care to warn specific users who didn’t move off the old buildpack at time of deletion.&lt;/p&gt;
&lt;p&gt;Create one CI job to give app teams advanced warning. The job should check the buildpack definition file for new buildpack versions, updating the entries for older buildpacks with an intended deletion date.&lt;/p&gt;
&lt;p&gt;Create a second CI job to delete buildpacks automatically from CF after that date, remembering first to query CF for a list of apps that are on the old buildpack &amp;amp; the list of CF users that own the Orgs and Spaces in which these apps run. These lists can be used to notify users of their dependency on a deleted buildpack.&lt;/p&gt;
&lt;p&gt;I like this approach because the buildpack removal dates could be adjusted manually in the event of an exception to the normal process.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;App-specific Buildpacks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this scenario application teams take responsibility for a copy of buildpack code. Responsibility for keeping up to date with language runtime binary (e.g. JRE) versions transitions to the app team. I have seen them used for cases as trivial as providing secret key material that was forbidden to be stored with ‘application code’.&lt;/p&gt;
&lt;p&gt;From experience these are a very bad idea for everything except temporary fixes. Application teams rarely keep the underlying binary versions up to date, so should be used as a last resort only.&lt;/p&gt;
&lt;p&gt;Where app teams require custom features above normal buildpack functionality, these should be added into the core (ideally public Github) buildpack code by the CF platform team in a generic way e.g. by adding support for downloading secret keys from a HSM.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buildpack Service Contract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create and publish a Buildpack Service Contract so that app teams understand the requirement to continuously upgrade buildpacks. An example contract might go something like:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Standard buildpacks&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standard buildpacks will be upgraded in place without notice&lt;/li&gt;
&lt;li&gt;All apps that depend on them will be rolled onto the new buildpack version&lt;/li&gt;
&lt;li&gt;In the case that a Deploy and Smoke Test CI job is provided, applications will be smoke tested before in a LAB environment before being upgraded&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Custom buildpacks&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Old buildpacks will be removed 2 weeks after provision of a later version of the same buildpack&lt;/li&gt;
&lt;li&gt;In the case of a Zero Day or High Severity security vulnerability, removal will be within 1 week&lt;/li&gt;
&lt;li&gt;All PCF Space-level users will be notified via email immediately a new buildpack is available&lt;/li&gt;
&lt;li&gt;At time of removal, the PCF Space-level users of any apps still running on the buildpack will be notified via email&lt;/li&gt;
&lt;li&gt;A versioned definition buildpacks and deployment dates will be made available&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Application buildpacks&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The app team owns the buildpack code and is responsible for the binary versions it installs and fixing the security defects that arise&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Hopefully this explains the cycle of buildpacks through CF.&lt;/p&gt;
&lt;p&gt;The only real hands-on part is the merging of upstream code, if any.&lt;/p&gt;</content><author><name></name></author><category term="buildpack" /><category term="cloud foundry" /><category term="pcf" /><summary type="html"> TL;DR Deploy / Remove buildpacks using CI and IaC. Aim for complete automation Continually update the ‘standard’ buildpacks that come with your CF installation &amp;amp; roll the apps that run on them For custom buildpacks: setup 2 automated cycles for Create and Warn/Remove Define a buildpacks service statement that makes the buildpack cycle clear Avoid app-specific buildpacks wherever possible &amp;nbsp; CF Buildpacks vs. traditional infrastructure With traditional infrastructure, where server installations are centrally managed, IT Security folks have often put pressure on IT departments to roll out server fixes e.g. new WebSphere fixpacks. This is tricky because IT departments do not have the resources to re-test all the apps against the upgraded binaries.</summary></entry><entry><title type="html">Mr. Enterprise meet Mr. Value Stream</title><link href="http://localhost:4000/2016/05/mr-enterprise-meet-mr-value-stream/" rel="alternate" type="text/html" title="Mr. Enterprise meet Mr. Value Stream" /><published>2016-05-20T05:39:03+01:00</published><updated>2016-05-20T05:39:03+01:00</updated><id>http://localhost:4000/2016/05/mr-enterprise-meet-mr-value-stream</id><content type="html" xml:base="http://localhost:4000/2016/05/mr-enterprise-meet-mr-value-stream/">&lt;p&gt;&lt;a href=&quot;/2016/05/mr-enterprise-meet-mr-value-stream/&quot;&gt;&lt;img class=&quot;alignnone wp-image-28&quot; src=&quot;/assets/Handshake-300x199.jpg&quot; alt=&quot;Handshake&quot; width=&quot;424&quot; height=&quot;281&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL; DR&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enterprises tend to ‘optimise’ IT by vertical stack &amp;amp; incur long delays at point of organisational change: waiting days or weeks for ticket fulfilment&lt;/li&gt;
&lt;li&gt;In contrast small companies inherently recognize Value Streams&lt;/li&gt;
&lt;li&gt;Enterprises overlaying Value Stream teams at organisational change would be much more competitive, including within software delivery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1: New Starter Process&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the last 6 years I’ve had the pleasure of starting work at 2 large (1000+ employee) enterprises, and one startup. The new starter on-boarding process at both these companies was slow – I finally had all the access to all the systems I needed a few weeks after starting - and it involved lots of opening tickets. In both cases thousands of pounds was wasted on unused manpower whilst I sat waiting.&lt;/p&gt;
&lt;p&gt;When I checked this with friends at other enterprises I found they’d had worse experiences in many cases: “You got a laptop in your first week?! Wow!”, “You were able to login on your third day? Incredible!”.&lt;/p&gt;
&lt;p&gt;I contrast this with working at a small startup: I arrived, was hand-held through the process of accessing all the systems I needed &amp;amp; was adding value by the end of first day.&lt;/p&gt;
&lt;p&gt;Small companies natively understand that getting a new starter working quickly is &lt;em&gt;valuable&lt;/em&gt; to the company. They inherently use a Value Stream, a concept from the Lean movement which came from Toyota Production System (TPS), to allow cross-functional activities to happen in order to gain value (i.e. eliminate waste) for the company. The cross-functional activities being in this case: providing laptops, getting software licenses, installing software, creating accounts, getting access across systems, locating documentation, etc.&lt;/p&gt;

&lt;p&gt;Enterprises on-board a higher number of new staff, and yet many miss this opportunity to eliminate waste, AKA add value. IT and Security Systems are typically divided into very thin vertical slices (e.g. Active Directory team, Desktop Software team), and new starter tickets are simply lost in the fog of other work coming into these teams via the ticket process. It is no person’s responsibility to optimize new starter value, so teams often fail to even keep a full list of the accounts / access a new team member requires.&lt;/p&gt;
&lt;p&gt;Those folks coming from small businesses are generally surprised to start with, but after a while working somewhere they too develop the “That’s how long it takes here” shrug. It seems that whilst enterprises are excellent at managing cost, they’re generally not good at eliminating waste.&lt;/p&gt;
&lt;p&gt;Establishing a New Starter team, who could define and arrange the things a new starter needs prior to arrival and during the first day, would add value across the enterprise by eliminating the multi-day or multi-week waste caused by new staff waiting for access.&lt;/p&gt;
&lt;p&gt;Equip that same team with Lean / Kanban techniques and they will naturally start to use concept of &lt;em&gt;Kaizen&lt;/em&gt;, meaning “continual improvement”, to optimise the process rather than simply raising the underlying tickets themselves. They’ll do things like: forming lists of activities by team; getting self-service access to the underlying systems; requesting automation from the vertical teams, etc.&lt;/p&gt;
&lt;p&gt;Doing this would also boost positive feeling as new starters are impressed by the speed with which they can be effective.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2: New Software Product Process&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When a business decides to build a new app a new software Product is born &amp;amp; will be developed.&lt;/p&gt;
&lt;p&gt;A small team is formed &amp;amp; will need a variety of new services to develop and run the app: access to a task tracking tool e.g. JIRA; a documentation space (e.g. a wiki / SharePoint); a Git repository for source code; Jenkins server for Continuous Integration (CI); an LDAP group defining team membership; some deployment infrastructure or access onto a PaaS; CI pipeline setup; centralized logging systems; APM tooling; etc.&lt;/p&gt;
&lt;p&gt;You can bet that these services will be managed by a variety of vertical teams, each requiring a ticket and a long wait. This break is typical of the loss of momentum that I’ve seen for new ideas at enterprises.&lt;/p&gt;
&lt;p&gt;You can also bet that there’s a startup somewhere having the same idea &amp;amp; putting that concept into production much faster, without losing momentum.&lt;/p&gt;
&lt;p&gt;Working in an environment where this loss of momentum doesn’t occur is infectious: folks in both IT and core business naturally start looking for unique opportunities, knowing that if they find one it would boost the prospects of both the company and their career. Self-interest is a very powerful driver.&lt;/p&gt;
&lt;p&gt;With Enterprises everywhere booting Digital Transformation programs, they would be wise to address not just the software architecture (Microservices!), team structure (two pizza teams!), deployment architecture (PaaS!), and delivery lifecycle (Continuous Delivery!) aspects; but also optimising the entry point process for each new Product team.&lt;/p&gt;
&lt;p&gt;Establishing a Digital Software Product team, who provide the services needed to develop and run new (or migrated) software product, would enable enterprises to stay competitive with startups, to avoid loss of momentum &amp;amp; develop a culture of innovation.&lt;/p&gt;
&lt;p&gt;Introducing enterprises to Value Streams at the point of organisational change can make a huge difference.&lt;/p&gt;</content><author><name></name></author><category term="enterprise" /><category term="value stream" /><summary type="html">TL; DR Enterprises tend to ‘optimise’ IT by vertical stack &amp;amp; incur long delays at point of organisational change: waiting days or weeks for ticket fulfilment In contrast small companies inherently recognize Value Streams Enterprises overlaying Value Stream teams at organisational change would be much more competitive, including within software delivery Example 1: New Starter Process In the last 6 years I’ve had the pleasure of starting work at 2 large (1000+ employee) enterprises, and one startup. The new starter on-boarding process at both these companies was slow – I finally had all the access to all the systems I needed a few weeks after starting - and it involved lots of opening tickets. In both cases thousands of pounds was wasted on unused manpower whilst I sat waiting. When I checked this with friends at other enterprises I found they’d had worse experiences in many cases: “You got a laptop in your first week?! Wow!”, “You were able to login on your third day? Incredible!”. I contrast this with working at a small startup: I arrived, was hand-held through the process of accessing all the systems I needed &amp;amp; was adding value by the end of first day. Small companies natively understand that getting a new starter working quickly is valuable to the company. They inherently use a Value Stream, a concept from the Lean movement which came from Toyota Production System (TPS), to allow cross-functional activities to happen in order to gain value (i.e. eliminate waste) for the company. The cross-functional activities being in this case: providing laptops, getting software licenses, installing software, creating accounts, getting access across systems, locating documentation, etc.</summary></entry><entry><title type="html">Don’t get stuck on Agility</title><link href="http://localhost:4000/2015/10/dont-get-stuck-on-agility/" rel="alternate" type="text/html" title="Don't get stuck on Agility" /><published>2015-10-26T15:30:48+00:00</published><updated>2015-10-26T15:30:48+00:00</updated><id>http://localhost:4000/2015/10/dont-get-stuck-on-agility</id><content type="html" xml:base="http://localhost:4000/2015/10/dont-get-stuck-on-agility/">&lt;p&gt;&lt;a href=&quot;/2015/10/dont-get-stuck-on-agility/&quot;&gt;&lt;img class=&quot;alignnone wp-image-28&quot; src=&quot;/assets/agility.png&quot; alt=&quot;Agility&quot; width=&quot;445&quot; height=&quot;181&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“Our customers are leaving for competitor X. We starting to think it’s because their apps are better” says the CEO to the CTO, “Why is it ours have such low usage figures?”&lt;/p&gt;
&lt;p&gt;“We develop new features but it often turns out they were the wrong idea in the first place, or by the time they’re live our competitors already have better versions than ours” replies the CTO.&lt;/p&gt;
&lt;p&gt;“Find out how to be more Agile” the order translates to as it hits Technology. A consultancy is hired to tell most of the tech folks at the Enterprise what they already know: the time it takes for an idea to make it into production (aka ‘cycle time’) is too long. Apparently quarterly concurrent releases across 30 apps, of which just a few are customer-facing, managed by 100 IT ops folks aren’t conducive to high velocity IT change. So how to change?&lt;/p&gt;
&lt;p&gt;Well its good news and bad.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The good news&lt;/em&gt;: despite what most software vendors would have you think, the majority of the change is organisational. Buying a PaaS isn’t a necessity, although it may help. This change hasn’t got to cost a lot in software license terms.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The bad news&lt;/em&gt;: organisational change is hard.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It turns out the major changes can be summed up into two changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Switch to smaller teams &amp;amp; decouple them in every way. Deliverables are ‘microservices’&lt;/li&gt;
&lt;li&gt;Switch from the project to product model&lt;/li&gt;
&lt;li&gt;Treat each product like a Lean Startup&lt;/li&gt;
&lt;li&gt;Decouple environment dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Microservices &amp;amp; Conways Law&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The fastest way to deliver software is to put your most suitable developers into one team, allow them to use the most suitable tools to get the job done, and leave them to it until their complete.&lt;/p&gt;
&lt;p&gt;Of course Enterprises have structure and standards that have some overall benefit in operating at such large scale, however these are going to get in the way of quick delivery. CTOs can either accept these as parameters, in which case delivery speed won’t change, or start decentralizing these rules and putting the responsibility on each team to meet the standards their own way.&lt;/p&gt;
&lt;p&gt;Mel Conway &lt;a href=&quot;http://www.melconway.com/Home/Committees_Paper.html&quot;&gt;wrote back in the 60s&lt;/a&gt; that the structure of the deliverable will represent the structure of the organisation that built it. Putting your resources into one team, working on one deliverable, will produce one ‘product’. The term ‘two pizza’ teams has sprung up to define a max team size: if it can’t be fed on two pizzas, the team is too big.&lt;/p&gt;
&lt;p&gt;The most decoupled architecture is to depend on other services at runtime, so that they can be modified / switched out / upgraded without affecting anyone else’s source code. Put this into practice and single teams are going to start producing ‘&lt;a href=&quot;http://martinfowler.com/articles/microservices.html&quot;&gt;microservices&lt;/a&gt;’, a term which really means an encapsulated app for providing a single service. They’re the opposite of monolith apps.&lt;/p&gt;
&lt;p&gt;By keeping backwards-compatibility as a standard, the release of these independent services can be done in isolation, avoiding the nasty multi-app release weekends those in Ops have come to know and hate.&lt;/p&gt;
&lt;p&gt;If you want to drill down into this, the absolute best explanation I’ve seen over why Conway’s law should be used to dictate organisational change is by &lt;a href=&quot;http://mamund.site44.com/talks/2015-10-qcon-teams/2015-10-qcon-teams.pdf&quot;&gt;Mike Amundsen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Products not projects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The project process wastes a lot of time: all the analysis, planning, estimating, fund allocation against estimation, resource allocation, etc. all take up elapsed time and can take developer time away from actually apps. Plus the dispersal of the project team after completion can leave the app languishing without proper dev support after go-live.&lt;/p&gt;
&lt;p&gt;Most Enterprises are discovering that the project model no longer fits for in-house developed apps, particularly those important ones that are always changing, and it’s best to keep developers assigned to an app &amp;amp; churning out features. Of course this is a tricky change of mind set for those who pay for the software, from a fixed price for a a project delivering a fixed set of features, to a fixed price for a team of devs for the year with no guarantees of any one feature delivered. However seeing past this transition can really pay off because the product process, having no unnecessary ‘stages’, gets software delivered significantly faster than projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lean Startups &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Eric Ries’ &lt;a href=&quot;http://www.amazon.co.uk/The-Lean-Startup-Innovation-Successful/dp/0670921602&quot;&gt;book&lt;/a&gt; ‘The Lean Startup: How Constant Innovation Creates Radically Successful Businesses’ is an amazing read. He loosely classifies a startup as any new team anywhere trying to do something new. The first step requires us to admit that nobody really knows what the customer wants except themselves, so the constant and only goal for the startup is to attain that knowledge.&lt;/p&gt;
&lt;p&gt;At Enterprises the requirements usually come from ‘The Business’, someone with business domain knowledge working with a BA to define what they think the customer wants. Applying The Lean Startup to Enterprises would result in product teams iteratively developing new features, exposing them to specific customer sets after each iteration, observing usage patterns (no focus groups!), and assessing success. Then deciding to keep the feature and develop it further, or delete it and develop some other feature based on the usage results. This continual process of assessing end user benefit &amp;amp; removing anything that does not directly provide it, is how successful apps are managed, and kept free from the kind of code bloat that can poison long-lived apps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Direct Environment Dependencies are evil&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Apps are generally going to depend on other ‘services’, particularly at Enterprises. Whatever form these service dependencies take, even with loose coupling the temptation will still be to have your app’s DEV, TST, UAT, PERF &amp;amp; STAGING environments all connected to the equivalent environments of their dependant services. It’s at this point the hard-wiring causes delays in delivery, losing days of testing time when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Environments are temporarily unavailable&lt;/li&gt;
&lt;li&gt;Environment refreshes cause data to be out-of-sync&lt;/li&gt;
&lt;li&gt;Data state changes dynamically and not all linked environments receive the update&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For me this specific area seems like the most under-addressed area of technology right now. I’ve seen organizations use &lt;a href=&quot;http://smartbear.com/all-resources/articles/what-is-service-virtualization/&quot;&gt;Service Virtualization&lt;/a&gt; tools for providing virtual copies of services, databases, messaging infrastructure and the like. Some organisations like &lt;a href=&quot;http://www.slideshare.net/wattersjames/cloud-foundry-lessons-learned-at-the-home-depot&quot;&gt;HomeDepot&lt;/a&gt; are putting tools like CA LISA at the centre of their Agile Transformation, which I’m certain will not be an inexpensive decision &amp;amp; shows they’re sure decoupling of environments is key to success.&lt;/p&gt;
&lt;p&gt;Last time I checked Gartner there were only 4 main vendors: CA, IBM, HP and Parasoft. However what the 4 solutions on the market right now have in common is that they are much too centralized: you can produce many copies of your main central database, however it is provided via a centralized SV infrastructure. And the cost of entry is way too high.&lt;/p&gt;
&lt;p&gt;For now, manually-developed stub services are still the most flexible way to decouple your environments. Eventual close coupling, say of Staging environments, is inevitable, however it shouldn’t be necessary right the way up to production.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don’t get fixated on tools and software&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As I’ve tried to show above: Agile Transformation is mainly about organisational change, not buying infrastructure.&lt;/p&gt;
&lt;p&gt;In comparative size, if organisational change were as big as a dog, the relative amount toolset change would only be as big as the tail of the dog. And using that analogy further it should be the larger organisational change that drives the tool change, after all it is the dog that wags the tail, not the other way around.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content><author><name></name></author><category term="agility" /><category term="product model" /><summary type="html">“Our customers are leaving for competitor X. We starting to think it’s because their apps are better” says the CEO to the CTO, “Why is it ours have such low usage figures?” “We develop new features but it often turns out they were the wrong idea in the first place, or by the time they’re live our competitors already have better versions than ours” replies the CTO. “Find out how to be more Agile” the order translates to as it hits Technology. A consultancy is hired to tell most of the tech folks at the Enterprise what they already know: the time it takes for an idea to make it into production (aka ‘cycle time’) is too long. Apparently quarterly concurrent releases across 30 apps, of which just a few are customer-facing, managed by 100 IT ops folks aren’t conducive to high velocity IT change. So how to change? Well its good news and bad. The good news: despite what most software vendors would have you think, the majority of the change is organisational. Buying a PaaS isn’t a necessity, although it may help. This change hasn’t got to cost a lot in software license terms. The bad news: organisational change is hard. TL;DR It turns out the major changes can be summed up into two changes: Switch to smaller teams &amp;amp; decouple them in every way. Deliverables are ‘microservices’ Switch from the project to product model Treat each product like a Lean Startup Decouple environment dependencies</summary></entry><entry><title type="html">The Antifragile PaaS</title><link href="http://localhost:4000/2015/10/the-antifragile-paas/" rel="alternate" type="text/html" title="The Antifragile PaaS" /><published>2015-10-08T16:48:07+01:00</published><updated>2015-10-08T16:48:07+01:00</updated><id>http://localhost:4000/2015/10/the-antifragile-paas</id><content type="html" xml:base="http://localhost:4000/2015/10/the-antifragile-paas/">&lt;p&gt;&lt;a href=&quot;/2015/10/the-antifragile-paas/&quot;&gt;&lt;img class=&quot;alignnone wp-image-28&quot; src=&quot;/assets/antifragile_paas.jpg&quot; alt=&quot;Agility&quot; width=&quot;600&quot; height=&quot;186&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Much has been made of Nassim Nicholas Taleb’s &lt;a href=&quot;http://www.amazon.co.uk/Antifragile-Things-that-Gain-Disorder/dp/0141038225&quot;&gt;Antifragility book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At a basic level if fragile describes a system that suffers when put under stress, and robust describes a system that is impervious to stress, an anti-fragile system is one that benefits from stress.&lt;/p&gt;
&lt;p&gt;Many things in nature are antifragile – a good example is the human body: you place a small amount of ‘stress’ on muscle, bone or skin and it’ll come back stronger than before the stress. In the world of IT we’re used to building robust systems: running apps on ‘traditional IT’ environments sized for peak load.&lt;/p&gt;
&lt;p&gt;I’ve heard antifragility referenced in relation to microservices, heard recommendations on building similar systems and allowing for Darwinian selection amongst similar systems, etc. The next generation of applications will most certainly be antifragile - able to strengthen themselves in response to stressors. Will yours be amongst them?&lt;/p&gt;
&lt;p&gt;Well, apps have to run on infrastructure of some kind. Today I’m going to talk about making antifragile PaaS infrastructure &amp;amp; how that can help make apps antifragile.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some PaaS offerings are getting close to making apps antifragile using auto-scaling, bridge the gap using team process&lt;/li&gt;
&lt;li&gt;Make your PaaS infrastructure antifragile using team process&lt;/li&gt;
&lt;li&gt;Fail everything all the time &amp;amp; re-route traffic to simulate failures and normal operations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Apps on PaaS &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m a Cloud Foundry user, both the open-source and vendor-provided types. The main advantage PaaS has over ‘traditional IT’ (by which I mean physical tin &amp;amp; VMs) for running apps, is the simplicity with which environments can scale. By building and storing an executable application ‘droplet’ before starting applications, Cloud Foundry can ‘scale’ an app to multiple instances when manually requested to do so. The Pivotal Cloud Foundry offering now has a built in feature to auto-scale applications between an upper and lower limit based on CPU usage.&lt;/p&gt;
&lt;p&gt;This kind of feature is putting application environments on the road from robustness to antifragility. The applications infrastructure (number of instances) increases under load. The only reason it isn’t quite a ‘true’ antifragile infrastructure yet is that the thresholds upon which the app can scale aren’t learnt – yet.&lt;/p&gt;
&lt;p&gt;Thankfully you can bridge the gap using team process: app support teams can use APM tools to check app performance metrics other than CPU, track how the number of instances has been adjusted over time and adjust the CPU thresholds &amp;amp; max/mix instance counts accordingly.&lt;/p&gt;
&lt;p&gt;So PaaS is getting close to antifragile for apps, but it’s not there yet. It is the people and process of the app support team that can make the app antifragile.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PaaS Infrastructure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Whatever PaaS you go for there’ll be a number of nodes of each type, scaled to minimum level for the function they provide e.g. 6 compute nodes, 1 central controller, 2 clustered message bus nodes, 1 log aggregator, etc. After the running the PaaS for a while you’re going to hit a limit on one of these: you’ll run out of compute capacity, start receiving more logs you can handle, or something similar. PaaS offerings typically allow these components to be scaled individually.&lt;/p&gt;
&lt;p&gt;Right now I haven’t seen any PaaS offerings that are detecting prolonged heavy activity and scale components accordingly, so it’s your PaaS Operations team – the folks who are running your PaaS infrastructure – who are going to pick up the gap.&lt;/p&gt;
&lt;p&gt;These folks will need to take every day warning signs from the PaaS itself – the log messages and metrics coming out of it – and scale or reconfigure the relevant component to strengthen the PaaS as a whole. So in this case of PaaS infrastructure, the PaaS Operations people and process can make the PaaS infrastructure antifragile.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fail everything. All the time.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ve &lt;a href=&quot;http://www.dhrapson.com/2015/09/dont-mix-cloud-with-it-departments/&quot;&gt;blogged before&lt;/a&gt; about how infrastructure that is too stable is actually a bad thing. Antifragility supports this thinking – a small amount of ‘stress’ applied regularly to application infrastructure will cause the app developers to strengthen it to avoid getting called out at night. I’m aware of the following approaches for Cloud Foundry:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Randomised infrastructure death using &lt;a href=&quot;https://github.com/strepsirrhini-army/chaos-lemur&quot;&gt;Chaos Lemur&lt;/a&gt;, akin to Neflix’s &lt;a href=&quot;http://techblog.netflix.com/2011/07/netflix-simian-army.html&quot;&gt;Simian Army&lt;/a&gt; , to test PaaS infrastructure. Because these failures will include compute nodes, it will cover both apps and the CF infrastructure itself.&lt;/li&gt;
&lt;li&gt;If PaaS environments have redundancy (e.g. run live-live), randomised routing of traffic from one Cloud Foundry instance to another to iron out routing / load-related problems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Experience dictates the requirement to do this right the way up to production. It’ll reassure developers and testers that the glitches they’re seeing in non-production aren’t just that – they’re real-world scenarios that need their root cause to be analysed – and keep them honest&lt;/p&gt;</content><author><name></name></author><category term="cloud" /><category term="cloudfoundry" /><category term="paas" /><category term="antifragile" /><category term="pcf" /><summary type="html">Much has been made of Nassim Nicholas Taleb’s Antifragility book. At a basic level if fragile describes a system that suffers when put under stress, and robust describes a system that is impervious to stress, an anti-fragile system is one that benefits from stress. Many things in nature are antifragile – a good example is the human body: you place a small amount of ‘stress’ on muscle, bone or skin and it’ll come back stronger than before the stress. In the world of IT we’re used to building robust systems: running apps on ‘traditional IT’ environments sized for peak load. I’ve heard antifragility referenced in relation to microservices, heard recommendations on building similar systems and allowing for Darwinian selection amongst similar systems, etc. The next generation of applications will most certainly be antifragile - able to strengthen themselves in response to stressors. Will yours be amongst them? Well, apps have to run on infrastructure of some kind. Today I’m going to talk about making antifragile PaaS infrastructure &amp;amp; how that can help make apps antifragile. TL;DR Some PaaS offerings are getting close to making apps antifragile using auto-scaling, bridge the gap using team process Make your PaaS infrastructure antifragile using team process Fail everything all the time &amp;amp; re-route traffic to simulate failures and normal operations</summary></entry><entry><title type="html">Don’t mix cloud with IT depts</title><link href="http://localhost:4000/2015/09/dont-mix-cloud-with-it-departments/" rel="alternate" type="text/html" title="Don't mix cloud with IT depts" /><published>2015-09-28T16:14:21+01:00</published><updated>2015-09-28T16:14:21+01:00</updated><id>http://localhost:4000/2015/09/dont-mix-cloud-with-it-departments</id><content type="html" xml:base="http://localhost:4000/2015/09/dont-mix-cloud-with-it-departments/">&lt;p&gt;&lt;a href=&quot;/2015/09/dont-mix-cloud-with-it-departments/&quot;&gt;&lt;img class=&quot;alignnone wp-image-28&quot; src=&quot;/assets/dont_mix.jpg&quot; alt=&quot;Agility&quot; width=&quot;198&quot; height=&quot;254&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When it comes to Cloud, change isn’t coming; it’s already here. &lt;a href=&quot;http://www.wsj.com/articles/SB10001424053111903480904576512250915629460&quot;&gt;Software is eating the world&lt;/a&gt; and the only thing between firms dropping out of markets or folding completely is the speed they can change their customer-facing apps.  Beating the competition is in many cases now a simple ‘foot race’ on who can deliver the best software experience to their customers. As a result it innovations in software delivery and IT infrastructure will increasingly determine the success or failure of industry players, rather than the quality of the product or service they provide.&lt;/p&gt;
&lt;p&gt;Start-ups are taking ground from Enterprises in part due to their ability to better harness seemingly endless resources of the cloud, and yet many enterprises just don’t seem to be able to make the leap to ‘full cloud’ adoption.&lt;/p&gt;
&lt;p&gt;Using my experience working with UK Enterprises I apply Disruptive Innovation (DI) theory to Enterprise IT departments &amp;amp; cloud adoption&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attempts to move to a cloud-like infrastructure model, with infrastructure managed by the same IT department as has run their ‘traditional IT’, are unlikely to realise the benefits of cloud&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;IT departments will face stiff competition from cloud ‘integrators’&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;An entirely separate ‘cloud services’ team, targeted at resolving the requirements of the security, compliance teams sooner, should enable business to consolidate their cloud platforms&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Recruit developers with experience of delivering &amp;amp; operating cloud-ready apps on public cloud &amp;amp; form them into teams separate from ‘traditional IT’ delivery teams&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Applying DI theory to Enterprises and Cloud&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Enterprises find cloud really, really hard. In search of answers to this anomaly I came across &lt;a href=&quot;http://www.amazon.co.uk/Innovators-Dilemma-Technologies-Management-Innovation/dp/142219602X&quot;&gt;The Innovator’s Dilemma&lt;/a&gt;, a book which introduced Disruptive Innovation (DI) theory one of the most influential management concepts in recent years. It has been labelled ‘the gospel of innovation’ even by its &lt;a href=&quot;http://www.newyorker.com/magazine/2014/06/23/the-disruption-machine&quot;&gt;harshest critics&lt;/a&gt;, and has subsequently been used to explain the rise and fall of businesses in a variety of industries.&lt;/p&gt;
&lt;p&gt;DI theory categorises new technology as either Sustaining Innovation (SI) or Disruptive Innovation (DI). Described loosely, SIs provide a straight line improvement of existing technology. DIs originate as an inferior product with a different set of characteristics that appeal to a secondary market audience. They eventually accede to the primary market when it outperforms in the characteristics most valued by the customers of that market. Example: the 2.5in disk-drives could store less data than their 3.5in predecessors used in desktops; however they were more rugged and consumed less power, so were more suited to laptops. Eventually desktops also used the smaller disk size at the point when they could store data sufficient data for the same price.&lt;/p&gt;
&lt;p&gt;Cloud fits the DI description perfectly: it provides a simpler subset of the functionality Enterprises can get from running their own infrastructure; is less reliable &amp;amp; has a less certain performance level. It has appealed to successful start-ups who have no datacentres or expensive infrastructure, and who value simplicity, speed of provision &amp;amp; flexibility.&lt;/p&gt;
&lt;p&gt;According to DI theory, companies are classified as ‘established firms’, present when a DI emerges and ‘entrant firms’, which rise to success on the back of the DI. IT departments at Enterprises are technically established firms since they have existed before the advent of cloud. There have always been competitors for provision of the service they provide, yet the cost barrier to outsourcing the whole operation to a technology behemoth, for example, has been high enough to make it seem as though that were not the case.&lt;/p&gt;
&lt;p&gt;IT departments have over the years been providing more efficient infrastructure. Technologies such as hypervisor virtualization have allowed Virtual Machines to be owned and managed using many of the same processes that were used for physical infrastructure. This was a classic SI in that almost all the change was made by the established firms and the ‘customers’ perceived very little change other than being able to get hold of ‘a server’ much faster. Enterprise IT departments have generally applied all the rigmarole that they learnt for physical tin to VMs: patching, inventory, standardisation, compliance, audit, security, etc.&lt;/p&gt;
&lt;p&gt;Companies usually start by turning to their established IT departments to provide cloud their infrastructure. The tendency has been to start with private cloud and apply all pre-existing internal rules that applied for traditional IT: role separation, separate prod/non-prod infrastructure, etc.  At least then you want have to get the ‘cloud policy’ rewritten, right?&lt;/p&gt;
&lt;p&gt;The trouble with this is: one of the main reasons start-ups are taking the market by storm is that they don’t have these barriers, these preconceptions that infrastructure has to be delivered, managed and secured a certain way.&lt;/p&gt;
&lt;p&gt;An easier route to success would be start a new team to break ground on providing cloud infrastructure, with separate reporting lines and a separate location from the existing IT department.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Getting the right customer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Clayton Christenson gives specific examples where engineers at established firms have found opportunities for entry into an emerging market, but were buried by management. He shows that if the innovation is not what the current customers want right now, then it will tend to get dropped or modified in favour of the more pressing requirement to satisfy today’s customers &amp;amp; that this is all a feature of &lt;em&gt;good&lt;/em&gt; management. The larger the firm and the more customers they have, the less able they are to satisfy anyone else; no wonder enterprises struggle.&lt;/p&gt;
&lt;p&gt;So who are an IT department’s customers? It’s the application teams who have developed applications to run traditional IT infrastructure and those that manage the apps. The infrastructure qualities these customers have most highly valued are reliability, stability and a fixed performance level, which may partly also explain the delays at which enterprises have taken up cloud: the current customer does not value its benefits as highly as it values stability.&lt;/p&gt;
&lt;p&gt;Unfortunately too much stability has the effect of getting developers used to relying on systems being available. If you can make assumptions that are true the vast majority of the time (e.g. the messaging platform will always be up, the downstream REST service will always be available) application architecture can be made much simpler. This has a natural tendency to cause tight coupling and hence fragility in systems to proliferate.&lt;/p&gt;
&lt;p&gt;In contrast there is a breed of developers working at start-ups, writing native cloud apps, who naturally expect that ‘everything fails all the time’ and do not value reliability in the same way. These are the customers that will drive cloud adoption at enterprises. They might be specifically recruited by a forward-thinking manager who has already seen the benefits of cloud elsewhere, or will naturally tend towards enterprise as they look for career stability. Either way they will want to rekindle the best practices from their earlier work. Learning a cloud ethos from these developers is paramount for enterprises, so isolating them away from existing development teams and practices is a good idea.&lt;/p&gt;
&lt;p&gt;Once sufficient cloud native developers are gathered, enterprises will start seeing requirements along the lines of “the business wants to get on cloud now” and without a cloud offering that matches their expectations (e.g. the private cloud isn’t really a cloud, doesn’t have enough self-service, runs out of capacity), the delivery team may turn to an ‘entrant firm’: a new company borne to success on the back of cloud adoption.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Who are the new boys&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With the advent of Cloud many off-the-shelf products that previously required significant infrastructure in the datacentre are now being delivered via SaaS (e.g. the move from on-premise CRM to SalesForce).&lt;/p&gt;
&lt;p&gt;This makes good business sense, building CRM configuration teams within IT departments is not a core competency for most enterprises and should be avoided if possible. CRM systems were large unwieldy beasts to manage and IT departments won’t be sorry to see these disappear as the trend continues. Such a change would leave IT departments with the business-differentiating apps to manage – the ideal situation. However not all apps are created equal and the more complex ‘traditional IT’ apps will continue to drive SIs on the infrastructure.&lt;/p&gt;
&lt;p&gt;DI theory describes the way in which established firms will tend to become focused on the higher-end requirements of a small set of high-paying customers; those who shout the loudest. Those customers will request more features in relation to the qualities they value e.g. HA, in preference to the features the low-end customers value e.g. self-service, flexibility. This in turn increases cost, clearing the way for the cheaper, simpler DI technology vendors to move in and take the lower-end customer ground as their products mature. With cloud as the DI the same model sees delivery units bypassing IT departments altogether as they become too expensive, unreactive, etc., and going straight to cloud themselves.&lt;/p&gt;
&lt;p&gt;There are raft of companies vying for business in on-boarding companies to cloud. It doesn’t seem that they’ve cracked Enterprise yet, but they’re definitely coming. I recently read that DualSpark, an AWS consulting firm founded by an ex-Amazon employee, now employs about 800 people. That’s some growth rate.&lt;/p&gt;
&lt;p&gt;The trouble with allowing each business team to choose their own integrator is that they will likely recommend a wide variety of cloud platforms and solutions, and make attempts to satisfy the compliance and security team requirements in a variety of ways.&lt;/p&gt;
&lt;p&gt;A better approach would be to address the concerns of these internal teams early on &amp;amp; produce a defined set of cloud features that meets their demands in a reduced number of ways. This could be the first task of your enterprise’s ‘cloud services’ team recommended above, right alongside forming the strategy for cloud.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IT Departments&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The inevitable effect of cloud on IT departments that cannot change their way of thinking (and I doubt many can) will be shrinkage as they are left with only the most complex traditional IT systems to look after. They will increasingly be run by ageing IT operatives using legacy technologies. As such systems tend to reach end-of-life, and are re-designed to run on cloud, IT departments will shrink further. They will be left with just a small number of central systems, however experience dictates these will probably include the most important systems upon which the core business functions are run, for these are generally the hardest to modify.&lt;/p&gt;
&lt;p&gt;Clay Christenson describes an interesting feature of firms that survive disruptive innovation: they usually do so by starting a new company that satisfies the needs of new customers, and the usually absorb the spin-off company back into parent at the point where the new market exceeds the previous. Upon reabsorption the management of the parent company could well be completely replaced with the management structure of the spin-off.&lt;/p&gt;
&lt;p&gt;I see no reason why such an approach would not work at an enterprise, with the ‘cloud services’ team absorbing work from incumbent IT department by enabling on-boarding to cloud for those delivery that have the right ethos &amp;amp; developers.&lt;/p&gt;
&lt;p&gt;Perhaps then there is a rocky road ahead for enterprise IT department middle management.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content><author><name></name></author><category term="cloud" /><category term="disruptive innovation" /><summary type="html">When it comes to Cloud, change isn’t coming; it’s already here. Software is eating the world and the only thing between firms dropping out of markets or folding completely is the speed they can change their customer-facing apps.  Beating the competition is in many cases now a simple ‘foot race’ on who can deliver the best software experience to their customers. As a result it innovations in software delivery and IT infrastructure will increasingly determine the success or failure of industry players, rather than the quality of the product or service they provide. Start-ups are taking ground from Enterprises in part due to their ability to better harness seemingly endless resources of the cloud, and yet many enterprises just don’t seem to be able to make the leap to ‘full cloud’ adoption. Using my experience working with UK Enterprises I apply Disruptive Innovation (DI) theory to Enterprise IT departments &amp;amp; cloud adoption TL;DR Attempts to move to a cloud-like infrastructure model, with infrastructure managed by the same IT department as has run their ‘traditional IT’, are unlikely to realise the benefits of cloud IT departments will face stiff competition from cloud ‘integrators’ An entirely separate ‘cloud services’ team, targeted at resolving the requirements of the security, compliance teams sooner, should enable business to consolidate their cloud platforms Recruit developers with experience of delivering &amp;amp; operating cloud-ready apps on public cloud &amp;amp; form them into teams separate from ‘traditional IT’ delivery teams</summary></entry></feed>